// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"main-service/pkg/api"
	"main-service/pkg/api/handler"
	"main-service/pkg/config"
	"main-service/pkg/db"
	"main-service/pkg/helper"
	"main-service/pkg/repository"
	"main-service/pkg/usecase"
)

// Injectors from wire.go:

func InitializeAPI(cfg config.Config) (*http.ServerHTTP, error) {
	gormDB, err := db.ConnectDatabase(cfg)
	if err != nil {
		return nil, err
	}

	helper:=helper.NewHelper(cfg)

	offerRepository := repository.NewOfferRepository(gormDB)
	offerUseCase := usecase.NewOfferUseCase(offerRepository)
	offerHandler := handler.NewOfferHandler(offerUseCase)

	wishlistRepository := repository.NewWishlistRepository(gormDB)
	wishlistUseCase := usecase.NewWishlistUseCase(wishlistRepository,offerRepository)
	wishlistHandler := handler.NewWishlistHandler(wishlistUseCase)


	adminRepository := repository.NewAdminRepository(gormDB)
	adminUseCase := usecase.NewAdminUseCase(adminRepository,helper)
	adminHandler := handler.NewAdminHandler(adminUseCase)

	inventoryRepository := repository.NewInventoryRepository(gormDB)
	inventoryUseCase := usecase.NewInventoryUseCase(inventoryRepository,offerRepository,helper,wishlistRepository)
	inventoryHandler := handler.NewInventoryHandler(inventoryUseCase)

	categoryRepository := repository.NewCategoryRepository(gormDB)
	categoryUseCase := usecase.NewCategoryUseCase(categoryRepository,inventoryRepository,offerRepository)
	categoryHandler := handler.NewCategoryHandler(categoryUseCase)



	otpRepository := repository.NewOtpRepository(gormDB)
	otpUseCase := usecase.NewOtpUseCase(cfg, otpRepository,helper)
	otpHandler := handler.NewOtpHandler(otpUseCase)


	orderRepository := repository.NewOrderRepository(gormDB)

	userRepository := repository.NewUserRepository(gormDB)
	userUseCase := usecase.NewUserUseCase(userRepository,cfg,otpRepository,inventoryRepository,orderRepository,helper)
	userHandler := handler.NewUserHandler(userUseCase)

	couponRepository := repository.NewCouponRepository(gormDB)
	couponUseCase := usecase.NewCouponUseCase(couponRepository)
	couponHandler := handler.NewCouponHandler(couponUseCase)

	orderUseCase := usecase.NewOrderUseCase(orderRepository,couponRepository,userUseCase)
	orderHandler := handler.NewOrderHandler(orderUseCase)


	cartRepository := repository.NewCartRepository(gormDB)
	cartUseCase := usecase.NewCartUseCase(cartRepository,inventoryRepository,userUseCase)
	cartHandler := handler.NewCartHandler(cartUseCase)


	paymentRepository := repository.NewPaymentRepository(gormDB)
	paymentUseCase := usecase.NewPaymentUseCase(paymentRepository)
	paymentHandler := handler.NewPaymentHandler(paymentUseCase)

	stationRepository := repository.NewStationRepository(gormDB)
	stationUseCase := usecase.NewStationUseCase(stationRepository)
	stationHandler := handler.NewStationHandler(stationUseCase)

	tagRepository := repository.NewTagRepository(gormDB)
	tagUseCase := usecase.NewTagUseCase(tagRepository)
	tagHandler := handler.NewTagHandler(tagUseCase)
	
	serverHTTP := http.NewServerHTTP(userHandler,adminHandler,categoryHandler,inventoryHandler,otpHandler,orderHandler,cartHandler,couponHandler,paymentHandler,offerHandler,wishlistHandler, stationHandler, tagHandler)



	return serverHTTP, nil
}
